#!/bin/sh

set -eu

usage() {
    cat <<EOF
Usage:
  puavo-imgbuild-tool --build imagetype
                      --buildrule-args buildrule-args
                      --buildrule-dirs buildrule-dirs
                      --configure-script configure-script
                      --extra-packages-dir extra-packages-dir
                      --image-excludes-file image-excludes-file
                      --release-name release-name
                      --set-root-passwd
                      --target-dir target-dir

  puavo-imgbuild-tool --apply-buildrules
                      --buildrule-args buildrule-args
                      --buildrule-dirs buildrule-dirs
                      --configure-script configure-script
                      --target-dir target-dir

  puavo-imgbuild-tool --install-packages
                      --buildrule-dirs buildrule-dirs
                      --configure-script configure-script
                      --extra-packages-dir extra-packages-dir
                      --target-dir target-dir

  puavo-imgbuild-tool --update-chroot
                      --buildrule-args buildrule-args
                      --buildrule-dirs buildrule-dirs
                      --configure-script configure-script
                      --extra-packages-dir extra-packages-dir
                      --target-dir target-dir

  puavo-imgbuild-tool --image --image-excludes-file image-excludes-file
                              --images-dir images-dir
                              --release-name release-name
                              --set-root-passwd
                              --target-dir target-dir

  puavo-imgbuild-tool --chroot         --target-dir target-dir
  puavo-imgbuild-tool --cleanup-chroot --target-dir target-dir

  An optional --builds-dir argument can be given to all actions.  If
  --target-dir is not set but --builds-dir is, --target-dir is asked
  interactively.

  --image-excludes-file defaults to /etc/puavo-image-tools/ltsp-image.excludes

  --buildrule-args are special options for applying buildrules

  --buildrule-dirs is a comma-separated list of directories
  that contain rules for building images

  --build takes optional arguments:

    --apt-proxy    [default is "localhost:3142", "no" may be used to turn off]
    --arch         [default is chroot architecture or "i386"]
    --distribution [default is "trusty"]
    --mirror       [default is "archive.ubuntu.com"]

EOF
    exit 1
}

get_default_for() {
  if [ -e ~/.config/puavo-build-image/defaults ]; then
    awk -v key="$1" '$1 == key { print $2 }' \
      ~/.config/puavo-build-image/defaults
  fi
}

if ! args=$(getopt -n "$0" -o + \
              -l 'apply-buildrules,apt-proxy:,arch:,build:,buildrule-args:,buildrule-dirs:,builds-dir:,chroot,cleanup-chroot,configure-script:,distribution:,extra-packages-dir:,image,image-excludes-file:,images-dir:,install-packages,mirror:,release-name:,set-root-passwd,target-dir:,update-chroot' \
              -- "$@"); then
  usage
fi

# defaults for these parameters (can be overridden on the command line args)
arch=
distribution=trusty

buildrule_args=
extra_packages_dir=
imagetype=
release_name=
set_root_passwd_args=
target_dir=

# parameters with config defaults
apt_proxy=$(get_default_for apt-proxy)
buildrule_dirs=$(get_default_for buildrule-dirs)
builds_dir=$(get_default_for builds-dir)
configure_script=$(get_default_for configure-script)
image_excludes_file=$(get_default_for image-excludes-file)
images_dir="$(get_default_for images-dir)"
mirror="$(get_default_for mirror)"

[ -z "$apt_proxy"           ] && apt_proxy="localhost:3142"
[ -z "$images_dir"          ] && images_dir="/opt/ltsp/images"
[ -z "$mirror"              ] && mirror="archive.ubuntu.com"
[ -z "$image_excludes_file" ] \
  && image_excludes_file="/etc/puavo-image-tools/ltsp-image.excludes"

eval "set -- $args"
while [ $# -ne 0 ]; do
  case "$1" in
    --apply-buildrules   \
    | --chroot           \
    | --cleanup-chroot   \
    | --image            \
    | --install-packages \
    | --update-chroot)
      action=${1#--}; shift
      ;;
    --build)
      action=${1#--}; imagetype=$2; shift; shift
      ;;

    --apt-proxy)
      apt_proxy=$2; shift; shift
      ;;
    --arch)
      arch=$2; shift; shift
      ;;
    --buildrule-args)
      buildrule_args=$2; shift; shift
      ;;
    --buildrule-dirs)
      buildrule_dirs=$2; shift; shift
      ;;
    --builds-dir)
      builds_dir=$2; shift; shift
      ;;
    --distribution)
      distribution=$2; shift; shift
      ;;
    --extra-packages-dir)
      extra_packages_dir=$2; shift; shift
      ;;
    --image-excludes-file)
      image_excludes_file=$2; shift; shift
      ;;
    --images-dir)
      images_dir=$2; shift; shift
      ;;
    --mirror)
      mirror=$2; shift; shift
      ;;
    --release-name)
      release_name=$2; shift; shift
      ;;
    --set-root-passwd)
      set_root_passwd_args=$1; shift;
      ;;
    --target-dir)
      target_dir=$2; shift; shift
      ;;
    --)
      shift; break;
      ;;
    *)
      usage
      ;;
  esac
done

[ "$apt_proxy" = "no" ] && apt_proxy=
if [ -n "$apt_proxy" ]; then
  mirror_maybe_proxied="http://${apt_proxy}/${mirror}/ubuntu/"
else
  mirror_maybe_proxied="http://${mirror}/ubuntu/"
fi

if [ -z "$target_dir" ]; then
  if [ "$action" = "build" -a -n "$builds_dir" ]; then
    if [ -n "$imagetype" ]; then
      target_dir="${builds_dir}/${imagetype}"
    else
      target_dir=$(/usr/lib/puavo-image-tools/puavo-ask-buildtarget-dir \
                     "$builds_dir")
    fi
  fi
  if [ -z "$target_dir" ]; then
    echo 'Could not determine target dir' >&2
    usage
  fi
fi

chroot_arch=$(chroot "$target_dir" dpkg --print-architecture 2>/dev/null \
                || true)
if [ -n "$chroot_arch" ]; then
  if [ -n "$arch" -a "$chroot_arch" != "$arch" ]; then
    echo "Requested arch ($arch) does not match chroot arch ($chroot_arch)" >&2
    exit 1
  fi
  arch=$chroot_arch
fi

[ -z "$arch" ] && arch=i386


run_configure_chroot() {
  if [ ! -x "$configure_script" ]; then
    echo "Configure script '${configure_script}' not found or not executable" \
      >&2
    return 1
  fi

  do_mounts
  run_with_setarch env DISABLE_DAEMONS=1 "$configure_script" "$@"
  do_umounts
}

dirs_with_postfix() {
  dirlist=$1
  postfix=$2

  echo "$dirlist" \
    | awk -F, -v postfix="$postfix" '
        { for (i = 1; i <= NF; i++) { print $i postfix } }
      '
}

do_mounts() {
  mount -o bind /dev     "$target_dir/dev"
  mount -o bind /dev/pts "$target_dir/dev/pts"
  mount -o bind /proc    "$target_dir/proc"
  mount -o bind /sys     "$target_dir/sys"
}

do_umounts() {
  # umount -l or -f ?  (XXX -f did not seem to work)
  umount -l "$target_dir/dev/pts"
  umount -l "$target_dir/dev"
  umount -l "$target_dir/proc"
  umount -l "$target_dir/sys"
}

wipe_chroot() {
  log_phase 'wiping chroot'
  do_umounts 2>/dev/null || true
  rm -rf "$target_dir"
}

get_imagetype() { run_configure_chroot -- --get-imagetype; }

log_phase() { echo ">>>>> IN PHASE: $1 <<<<<"; }

build_chroot() {
  wipe_chroot

  log_phase 'debootstrap'
  run_with_setarch \
    debootstrap --arch="$arch" \
                --components=main,restricted,universe,multiverse \
                "$distribution" "$target_dir" "$mirror_maybe_proxied"
}

apply_buildrules() {
  log_phase apply-buildrules
  run_configure_chroot --update-buildrules-from-buildhost \
                       --buildrule-dirs "$buildrule_dirs" \
                       --target-dir     "$target_dir"
  run_configure_chroot -- --apply-buildrules \
                          --buildrule-args "$buildrule_args"
  run_configure_chroot -- --apply-buildrules                 \
                          --buildrule-args "$buildrule_args" \
                          --error-on-change
}

install_packages() {
  log_phase install-packages

  package_dirs="$(dirs_with_postfix "${buildrule_dirs}" \
                                    "/packages/$(get_imagetype)")"
  package_dirs="$package_dirs $extra_packages_dir"

  run_configure_chroot --install-packages "$package_dirs"
}

run_in_chroot() {
  do_mounts
  run_with_setarch chroot "$target_dir" env DISABLE_DAEMONS=1 "$@"
  do_umounts
}

run_with_setarch() {
  case "$arch" in
    amd64) setarch x86_64  "$@" ;;
    *    ) setarch "$arch" "$@" ;;
  esac
}

apt_dist_upgrade() {
  log_phase dist-upgrade
  run_configure_chroot -- --apt-dist-upgrade
}

apt_update() {
  log_phase apt-update
  run_configure_chroot -- --apt-update
}

bootstrap_configure() {
  run_configure_chroot --bootstrap                            \
                       --target-dir "$target_dir"             \
                       --configure-script "$configure_script" \
                       -- --apt-proxy    "$apt_proxy"         \
                          --distribution "$imagetype"         \
                          --imagetype    "$imagetype"         \
                          --mirror       "$mirror"
}

update_chroot() {
  log_phase update-chroot

  # XXX update buildrules
  apt_update
  apply_buildrules
  apt_dist_upgrade
  apply_buildrules
  install_packages

  touch "${target_dir}/tmp/.update_chroot_done"
}

make_image() {
  log_phase image

  if [ -n "$set_root_passwd_args" ]; then
    run_configure_chroot -- $set_root_passwd_args
  fi

  run_configure_chroot -- --prepare-image

  ltspimage_name=$(run_configure_chroot -- --get-imagename)

  mkdir -p "$images_dir"
  mksquashfs "$target_dir" "${images_dir}/${ltspimage_name}.tmp" \
             -noappend                                         \
             -ef "${image_excludes_file}"                      \
             -wildcards
  mv "${images_dir}/${ltspimage_name}.tmp" "${images_dir}/${ltspimage_name}"
  echo "Successfully created a squashfs image: ${images_dir}/${ltspimage_name}"
}

cleanup() {
  do_umounts 2>/dev/null || true
}

trap cleanup 0 INT TERM

if [ "$(id -u)" -ne 0 ]; then
  echo 'Run me as root' >&2
  exit 1
fi

case "$action" in
  apply-buildrules)
    apply_buildrules
    ;;
  build)
    if [ -e "${target_dir}/tmp/.update_chroot_done" ]; then
      {
        echo "Build for $(basename $target_dir) has already been successfully"
        echo "done.  Do --cleanup-chroot if you want to throw away the build."
      } >&2
      exit 1
    fi

    log_phase build

    build_chroot
    bootstrap_configure
    update_chroot
    make_image
    ;;
  chroot)
    run_in_chroot bash
    ;;
  cleanup-chroot)
    rm -rf "$target_dir"
    ;;
  image)
    make_image
    ;;
  install-packages)
    install_packages
    ;;
  update-chroot)
    update_chroot
    ;;
esac

exit 0
