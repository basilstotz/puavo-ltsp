#!/bin/sh

set -e

user=${user:-$SUDO_USER}
user=${user:-$USER}

option=$1
option_argument=$2

set -u

# these should probably be some kind of parameters:
arch=i386
distribution=trusty
mirror=fi.archive.ubuntu.com

mirror_through_apt_cacher="http://localhost:3142/$mirror/ubuntu/"

images_dir="/opt/ltsp/images"
target_dir="/virtualtmp/$user/$distribution"

do_mounts() {
  mount -o bind /dev     "$target_dir/dev"
  mount -o bind /dev/pts "$target_dir/dev/pts"
  mount -o bind /proc    "$target_dir/proc"
}

do_umounts() {
  # umount -l or -f ?  (XXX -f did not seem to work)
  umount -l "$target_dir/dev/pts"
  umount -l "$target_dir/dev"
  umount -l "$target_dir/proc"
}

wipe_chroot() {
  do_umounts 2>/dev/null || true
  rm -rf "$target_dir"
}

ask_and_set_image_information() {
  imagetype=$(cat $target_dir/etc/ltsp/this_ltspimage_type)
  if [ -z "$imagetype" ]; then
    echo 'No imagetype is set in image chroot, can not continue' >&2
    return 1
  fi

  build_date=$(date +%Y-%m-%d-%H%M%S)
  build_version=ltsp-$imagetype-$distribution-$build_date
  ltspimage_name="$build_version-$arch.img"

  old_release_name=
  read old_release_name 2>/dev/null \
    < "$target_dir/etc/ltsp/this_ltspimage_release" || true

  read -p "Release name [${old_release_name}]: " new_release_name
  new_release_name=${new_release_name:-${old_release_name}}

  echo "$ltspimage_name"   > "$target_dir/etc/ltsp/this_ltspimage_name"
  echo "$new_release_name" > "$target_dir/etc/ltsp/this_ltspimage_release"

  while true; do
    read -p 'Set root password [y/N] ? ' do_set_rootpw
    case "$do_set_rootpw" in
       '')                       break                       ;;
      Y|y) run_in_chroot passwd; break                       ;;
      N|n)                       break                       ;;
        *) echo 'Simple question, simple answer please!' >&2 ;;
    esac
  done
}

build_chroot() {
  wipe_chroot

  run_with_setarch \
    debootstrap --arch=i386 \
		--components=main,restricted,universe,multiverse \
		trusty "$target_dir" "$mirror_through_apt_cacher"

  # setup apt sources list

  cat <<'EOF' > "$target_dir/etc/apt/sources.list.d/archive.list"
deb http://archive.opinsys.fi/git-trusty trusty main restricted universe multiverse
deb-src http://archive.opinsys.fi/git-trusty trusty main restricted universe multiverse
EOF

  # setup policy-rc.d (so that daemons are not started when installing)

  cat <<'EOF' > "$target_dir/usr/sbin/policy-rc.d"
#!/bin/sh
[ "$DISABLE_DAEMONS" != "" ] && exit 101
EOF
  chmod 755 "$target_dir/usr/sbin/policy-rc.d"

  # the install script

  cat <<'EOF' > "$target_dir/root/install.sh"
#!/bin/sh

set -eu

export DEBIAN_FRONTEND=noninteractive
export DISABLE_DAEMONS=1

apt-get update
apt-get -y install linux-image-generic

cd /boot
for vmlinuz in vmlinuz-*; do
  test -e "$vmlinuz" || break
  kernel_version=${vmlinuz##vmlinuz-}
  ln -s "vmlinuz-$kernel_version"    vmlinuz
  ln -s "initrd.img-$kernel_version" initrd.img
done
EOF
  chmod 755 "$target_dir/root/install.sh"

  run_in_chroot /root/install.sh
  rm -f "$target_dir/root/install.sh"	# cleanup after
}

set_debconf_seeds() {
  run_in_chroot debconf-set-selections < config/debconf.seeds
}

set_timezone() {
  cp /etc/localtime $target_dir/etc/localtime
  cp /etc/timezone  $target_dir/etc/timezone
}

set_ltspimage_type() {
  imagetype=$1

  mkdir -p $target_dir/etc/ltsp
  echo "$imagetype" > "$target_dir/etc/ltsp/this_ltspimage_type"
}

prepare_puppet() {
  puppet_classes=$1

  puppet_module_dirs=$(
    echo puppet/* \
      | xargs -n 1 basename  \
      | xargs -n 1 printf "/etc/puppet/ltsp/%s\n" \
      | xargs \
      | tr ' ' ':')

  run_in_chroot apt-get -qq -y install puppet-common

  mkdir -p "$target_dir/etc/puppet/ltsp"
  echo "$puppet_classes"     > "$target_dir/etc/puppet/ltsp/.classes"
  echo "$puppet_module_dirs" > "$target_dir/etc/puppet/ltsp/.module_dirs"
}

apply_puppet() {
  mode=$1

  case "$mode" in
    chroot)
      puppet_target_dir=$target_dir
      run_command=run_in_chroot
      ;;
    local)
      puppet_target_dir=/
      run_command=
      ;;
    *)
      return 1
      ;;
  esac

  # sanity check to prevent mistakes
  if [ ! -d "${puppet_target_dir}/etc/puppet/ltsp" ]; then
    echo 'Puppet is not initialized to the target directory' >&2
    return 1
  fi

  puppet_classes=$(cat ${puppet_target_dir}/etc/puppet/ltsp/.classes)
  puppet_module_dirs=$(cat ${puppet_target_dir}/etc/puppet/ltsp/.module_dirs)

  rm -rf $puppet_target_dir/etc/puppet/ltsp/*
  cp -HR puppet/* "$puppet_target_dir/etc/puppet/ltsp"

  logfile_path="/var/log/puppet/ltsp-$(date +%Y-%m-%d-%H%M%S).log"
  $run_command puppet apply                           \
		  --detailed-exitcodes                \
		  --logdest console                   \
		  --logdest "$logfile_path"           \
		  --execute "include $puppet_classes" \
		  --modulepath "$puppet_module_dirs"  \
    || [ $? -eq 2 ]
}

run_in_chroot() {
  do_mounts
  run_with_setarch chroot "$target_dir" env DISABLE_DAEMONS=1 "$@"
  do_umounts
}

run_with_setarch() {
  # i386 is hardcoded for now
  setarch i386 "$@"
}

make_image() {
  if [ -x "$target_dir/usr/bin/updatedb" ]; then
    echo 'Running updatedb in chroot'
    run_in_chroot updatedb
  fi

  ask_and_set_image_information

  mkdir -p "$images_dir"
  mksquashfs "$target_dir" "$images_dir/${ltspimage_name}.tmp" \
	     -noappend \
	     -ef config/ltsp-image.excludes \
	     -wildcards
  mv "$images_dir/${ltspimage_name}.tmp" "$images_dir/${ltspimage_name}"
}

cleanup() {
  do_umounts 2>/dev/null || true
}

trap cleanup 0 INT TERM

if [ "$(id -u)" -ne 0 ]; then
  echo 'Run me as root' >&2
  exit 1
fi

case "$option" in
  --build-all-for)
    imagetype=$option_argument

    $0 --build-chroot "$imagetype"
    # XXX apparently this does not stop and exit with puppet errors here, why?
    $0 --update-chroot
    $0 --image

    ;;
  --build-chroot)
    imagetype=$option_argument
    if [ -z "$imagetype" ]; then
      echo 'Did not define an image type, exiting...' >&2
      return 1
    fi

    build_chroot
    set_debconf_seeds
    set_timezone
    set_ltspimage_type "$imagetype"
    prepare_puppet "image::$imagetype"
    ;;
  --chroot)
    run_in_chroot bash
    ;;
  --image)
    make_image
    ;;
  --update-chroot)
    apply_puppet chroot
    ;;
  --update-local)
    apply_puppet local
    ;;
  *)
    cat <<EOF >&2
Usage:
  $(basename $0) --build-all-for imagetype
  $(basename $0) --build-chroot imagetype
  $(basename $0) --chroot
  $(basename $0) --image
  $(basename $0) --update-chroot
EOF
    exit 1
    ;;
esac

exit 0
