#!/usr/bin/ruby1.9.1

require 'getoptlong'
require 'json'

def imgbuild_args(cmdline_switch, conf, key)
  value = conf[key]
  value.kind_of?(String) && !value.empty? \
    ? [ cmdline_switch, value ]           \
    : []
end

def build_config_target(config_target, config_file)
  image_confs = image_configuration(config_file)

  if !image_confs.has_key?(config_target) then
    raise "No config target '#{ config_target }' in '#{ config_file }'"
  end

  conf = image_confs[config_target]

  raise "Distribution is not defined for '#{ config_target }'" \
    unless conf['distribution'].kind_of?(String) \
             && !conf['distribution'].empty?

  puppet_args  = imgbuild_args('--puppet-classes', conf, 'puppet-classes')
  release_args = imgbuild_args('--release-name',   conf, 'release-name')

  system('/usr/lib/puavo-image-tools/puavo-imgbuild-tool',
         '--build',        config_target,
         '--distribution', conf['distribution'],
         *puppet_args,
         *release_args) \
    or raise "Problem in building '#{ config_target }'"
end

def builder_confs(builder_confs_path)
  Hash[ IO.readlines(builder_confs_path).map { |line| line.split } ]
end

def image_configuration(imagejson_path)
  JSON.parse( File.read(imagejson_path) )
end

def ensure_string_sanity(string)
  return if string.kind_of?(String) && string.match(/^[.a-zA-Z0-9-]+$/)

  raise "String '#{ string }' is not sane enough"
end

def output_makefile(builder_confs, image_confs)
  image_targets = image_confs.keys
  image_targets.each { |image_target| ensure_string_sanity(image_target) }

  images_dir = builder_confs['images-dir'] || ''

  image_files = \
    image_confs.map do |image_target, image_settings|
      images = image_settings['images'].kind_of?(Array) \
                 ? image_settings['images']             \
                 : []
      images.each { |s| ensure_string_sanity(s) }

      images.map { |s| "#{ images_dir }/#{ s }" }
    end.flatten.uniq

  puts <<EOF
CHROOT_TARGETS = chroot cleanup-chroot dist-upgrade image install-packages \\
		 puppet-chroot puppet-chroot-error-on-change puppet-local \\
		 update-chroot

IMAGE_FILES = #{ image_files.join(' ') }

IMAGE_TARGETS = #{ image_targets.join(' ') }

.PHONY: ${CHROOT_TARGETS}
${CHROOT_TARGETS}:
	sudo /usr/lib/puavo-image-tools/puavo-imgbuild-tool --$@

.PHONY: ${IMAGE_TARGETS}
${IMAGE_TARGETS}: images.json
	sudo puavo-build-image --config-target $@ --images-config $<

help:
	@echo "Available image targets are:"
	@echo "  ${IMAGE_TARGETS}" | fmt
	@echo
	@echo "Available other targets are:"
	@echo "  ${CHROOT_TARGETS}" | fmt
EOF
end

def usage()
  puts <<-EOF
You use me wrong, use better!
EOF
  exit(1)
end

config_file = nil
config_target = nil
output_makefile = false

begin
  opts = GetoptLong.new(
           [ '--images-config',   '-i', GetoptLong::REQUIRED_ARGUMENT ],
           [ '--output-makefile', '-m', GetoptLong::NO_ARGUMENT       ],
           [ '--config-target',   '-t', GetoptLong::REQUIRED_ARGUMENT ])

  opts.each do |opt, arg|
    case opt
      when '--config-target'
	config_target = arg
      when '--images-config'
	config_file = arg
      when '--output-makefile'
	output_makefile = true
    end
  end
rescue GetoptLong::InvalidOption => e
  usage
end

if output_makefile && config_file then
  builder_confs_path = "#{ ENV['HOME'] }/.config/puavo-build-image/defaults"
  builder_confs = builder_confs(builder_confs_path)
  output_makefile(builder_confs, image_configuration(config_file))
  exit(0)
elsif config_file && config_target then
  build_config_target(config_target, config_file)
else
  usage()
end
