#!/bin/sh

set -eu

usage() {
    cat <<EOF
Usage:
  puavo-build-image --build imagetype
                    --extra-puppet-modules-dirs extra-puppet-modules-dirs
                    --imagebuild-sources-dir imagebuild-sources-dir
                    --release-name release-name
                    --set-root-password
                    --target-dir target-dir

  puavo-build-image --chroot         --target-dir target-dir
  puavo-build-image --cleanup-chroot --target-dir target-dir
  puavo-build-image --dist-upgrade   --target-dir target-dir
  puavo-build-image --image --release-name release-name --set-root-password
                            --target-dir target-dir

  puavo-build-image --puppet-chroot
                    --extra-puppet-modules-dirs extra-puppet-modules-dirs
                    --imagebuild-sources-dir imagebuild-sources-dir
                    --target-dir target-dir
  puavo-build-image --puppet-chroot-error-on-change
                    --extra-puppet-modules-dirs extra-puppet-modules-dirs
                    --imagebuild-sources-dir imagebuild-sources-dir
                    --target-dir target-dir
  puavo-build-image --puppet-local
                    --extra-puppet-modules-dirs extra-puppet-modules-dirs
                    --imagebuild-sources-dir imagebuild-sources-dir
                    --target-dir target-dir
  puavo-build-image --update-chroot
                    --extra-puppet-modules-dirs extra-puppet-modules-dirs
                    --imagebuild-sources-dir imagebuild-sources-dir
                    --target-dir target-dir

  An optional --builds-dir argument can be given to all actions.  If
  --target-dir is not set but --builds-dir is, --target-dir is asked
  interactively.

  --extra-puppet-modules-dirs is a comma-separated list of directories
  that contain some extra puppet modules

  --imagebuild-sources-dir defaults to current directory

  --build takes optional arguments:

    --apt-proxy    [default is "localhost:3142", "" may be used to turn off]
    --arch         [default is "i386"]
    --distribution [default is "trusty"]
    --gitbranch    [default is "trusty"]
    --mirror       [default is "fi.archive.ubuntu.com"]

EOF
    exit 1
}

get_default_for() {
  awk -v key="$1" '$1 == key { print $2 }' \
    ~/.config/puavo-build-image/defaults
}

if ! args=$(getopt -n "$0" -o + \
              -l 'build:,chroot,cleanup-chroot,dist-upgrade,image,puppet-chroot,puppet-chroot-error-on-change,puppet-local,update-chroot,apt-proxy:,arch:,builds-dir:,distribution:,extra-puppet-modules-dirs:,gitbranch:,mirror:,release-name:,set-root-password,imagebuild-sources-dir:,target-dir:' \
              -- "$@"); then
  usage
fi

# defaults for these parameters (can be overridden on the command line args)
arch=i386
distribution=trusty
gitbranch=trusty
mirror=fi.archive.ubuntu.com

release_name=
set_root_password=
target_dir=

# parameters with config defaults
apt_proxy=$(get_default_for apt-proxy)
builds_dir=$(get_default_for builds-dir)
extra_puppet_modules_dirs=$(get_default_for extra-puppet-modules-dirs)
imagebuild_sources_dir=$(get_default_for imagebuild-sources-dir)

[ -z "$apt_proxy"              ] && apt_proxy=localhost:3142
[ -z "$imagebuild_sources_dir" ] && imagebuild_sources_dir=$(pwd)


eval "set -- $args"
while [ $# -ne 0 ]; do
  case "$1" in
    --chroot                          \
    | --cleanup-chroot                \
    | --dist-upgrade                  \
    | --image                         \
    | --puppet-chroot                 \
    | --puppet-chroot-error-on-change \
    | --puppet-local                  \
    | --update-chroot)
      action=${1#--}; shift
      ;;

    --build)
      action=${1#--}; imagetype=$2; shift; shift
      ;;

    --apt-proxy)
      apt_proxy=$2; shift; shift
      ;;
    --arch)
      arch=$2; shift; shift
      ;;
    --builds-dir)
      builds_dir=$2; shift; shift
      ;;
    --distribution)
      distribution=$2; shift; shift
      ;;
    --extra-puppet-modules-dirs)
      extra_puppet_modules_dirs=$2; shift; shift
      ;;
    --gitbranch)
      gitbranch=$2; shift; shift
      ;;
    --imagebuild-sources-dir)
      imagebuild_sources_dir=$2; shift; shift
      ;;
    --mirror)
      mirror=$2; shift; shift
      ;;
    --release-name)
      release_name=$2; shift; shift
      ;;
    --set-root-password)
      set_root_password=$1; shift;
      ;;
    --target-dir)
      target_dir=$2; shift; shift
      ;;
    --)
      shift; break;
      ;;
    *)
      usage
      ;;
  esac
done

if [ -z "$target_dir" ]; then
  if [ -n "$builds_dir" ]; then
    if [ "$action" = "build" ]; then
      target_dir="${builds_dir}/${imagetype}-${distribution}"
    else
      target_dir=$(/usr/lib/puavo-image-tools/puavo-ask-buildtarget-dir \
                     "$builds_dir")
    fi
    [ -z "$target_dir" ] && usage
  else
    usage
  fi
fi

if [ -n "$apt_proxy" ]; then
  mirror_through_proxy="http://${apt_proxy}/${mirror}/ubuntu/"
else
  mirror_through_proxy="http://${mirror}/ubuntu/"
fi

images_dir="/opt/ltsp/images"

do_mounts() {
  mount -o bind /dev     "$target_dir/dev"
  mount -o bind /dev/pts "$target_dir/dev/pts"
  mount -o bind /proc    "$target_dir/proc"
  mount -o bind /sys     "$target_dir/sys"
}

do_umounts() {
  # umount -l or -f ?  (XXX -f did not seem to work)
  umount -l "$target_dir/dev/pts"
  umount -l "$target_dir/dev"
  umount -l "$target_dir/proc"
  umount -l "$target_dir/sys"
}

wipe_chroot() {
  do_umounts 2>/dev/null || true
  rm -rf "$target_dir"
}

ask_and_set_image_information() {
  release_name=$1

  imagetype=$(cat "$target_dir/etc/ltsp/this_ltspimage_type")
  if [ -z "$imagetype" ]; then
    echo 'No imagetype is set in image chroot, can not continue' >&2
    return 1
  fi

  distribution=$(run_in_chroot lsb_release -cs)
  if [ -z "$distribution" ]; then
    echo 'Could not figure out target image distribution' >&2
    return 1
  fi

  build_date=$(date +%Y-%m-%d-%H%M%S)
  build_version=ltsp-$imagetype-$distribution-$build_date
  ltspimage_name="$build_version-$arch.img"

  if [ -n "$release_name" ]; then
    new_release_name=$release_name
  else
    old_release_name=$(
      cat "$target_dir/etc/ltsp/this_ltspimage_release" 2>/dev/null || true)

    while true; do
      read -p "Release name [${old_release_name}]: " new_release_name
      new_release_name=${new_release_name:-${old_release_name}}
      [ -n "$new_release_name" ] && break
      echo 'Give a release name!' >&2
    done
  fi

  echo "$ltspimage_name"   > "$target_dir/etc/ltsp/this_ltspimage_name"
  echo "$new_release_name" > "$target_dir/etc/ltsp/this_ltspimage_release"
}

build_chroot() {
  wipe_chroot

  run_with_setarch \
    debootstrap --arch="$arch" \
                --components=main,restricted,universe,multiverse \
                "$distribution" "$target_dir" "$mirror_through_proxy"

  # setup apt proxy (maybe)
  if [ -n "$apt_proxy" ]; then
    cat <<EOF > "$target_dir/etc/apt/apt.conf.d/00imagebuild-proxy"
acquire::http::proxy "http://$apt_proxy";
EOF
  fi

  # setup apt sources list

  cat <<EOF > "$target_dir/etc/apt/sources.list.d/archive.list"
deb http://archive.opinsys.fi/git-$gitbranch $distribution main restricted universe multiverse
deb-src http://archive.opinsys.fi/git-$gitbranch $distribution main restricted universe multiverse
EOF

  # setup policy-rc.d (so that daemons are not started when installing)

  cat <<'EOF' > "$target_dir/usr/sbin/policy-rc.d"
#!/bin/sh
[ "$DISABLE_DAEMONS" != "" ] && exit 101
EOF
  chmod 755 "$target_dir/usr/sbin/policy-rc.d"

  # the install script

  cat <<'EOF' > "$target_dir/root/install.sh"
#!/bin/sh

set -eu

export DEBIAN_FRONTEND=noninteractive
export DISABLE_DAEMONS=1

apt-get update
apt-get -y install linux-image-generic

cd /boot
for vmlinuz in vmlinuz-*; do
  test -e "$vmlinuz" || break
  kernel_version=${vmlinuz##vmlinuz-}
  ln -s "vmlinuz-$kernel_version"    vmlinuz
  ln -s "initrd.img-$kernel_version" initrd.img
done
EOF
  chmod 755 "$target_dir/root/install.sh"

  run_in_chroot /root/install.sh
  rm -f "$target_dir/root/install.sh"   # cleanup after
}

set_debconf_seeds() {
  imagetype=$1
  debconf_seeds_file=${imagebuild_sources_dir}/config/debconf.seeds.$imagetype
  if [ -r "$debconf_seeds_file" ]; then
    run_in_chroot debconf-set-selections < "$debconf_seeds_file"
  fi
}

set_ltspimage_type() {
  imagetype=$1

  mkdir -p "$target_dir/etc/ltsp"
  echo "$imagetype" > "$target_dir/etc/ltsp/this_ltspimage_type"
}

prepare_puppet() {
  puppet_classes=$1

  # install puppet and also language-pack-en is so that puppet rules can
  # use utf8-characters
  run_in_chroot apt-get -qq -y install language-pack-en puppet-common

  mkdir -p "$target_dir/etc/puppet/ltsp"
  echo "$puppet_classes" > "$target_dir/etc/puppet/ltsp/.classes"
}

apply_puppet() {
  mode=$1
  error_if_changed=$2

  case "$mode" in
    chroot)
      puppet_target_dir="$target_dir"
      run_command=run_in_chroot
      ;;
    local)
      puppet_target_dir=/
      run_command=
      ;;
    *)
      return 1
      ;;
  esac

  if [ "$error_if_changed" = "true" ]; then
    another_ok_puppetcode=0
  else
    another_ok_puppetcode=2
  fi

  # sanity check to prevent mistakes
  if [ ! -d "${puppet_target_dir}/etc/puppet/ltsp" ]; then
    echo 'Puppet is not initialized to the target directory' >&2
    return 1
  fi

  puppet_classes=$(cat "${puppet_target_dir}/etc/puppet/ltsp/.classes")

  rm -rf $puppet_target_dir/etc/puppet/ltsp/*
  for puppet_dir in ${imagebuild_sources_dir}/puppet \
                    $(echo "$extra_puppet_modules_dirs" | tr ',' ' '); do
    for puppet_module in ${puppet_dir}/*; do
      if [ -d "$puppet_module" ]; then
        puppet_module_target_path="${puppet_target_dir}/etc/puppet/ltsp/$(basename "$puppet_module")"
        if [ -e "$puppet_module_target_path" ]; then
          echo "Puppet module in $puppet_module overrides another module" >&2
          return 1
        fi

        cp -R "$puppet_module" "$puppet_target_dir/etc/puppet/ltsp"
      fi
    done
  done

  logfile_path="/var/log/puppet/ltsp-$(date +%Y-%m-%d-%H%M%S).log"
  $run_command env LANG=en_US.UTF-8                   \
                  puppet apply                        \
                  --detailed-exitcodes                \
                  --logdest console                   \
                  --logdest "$logfile_path"           \
                  --execute "include $puppet_classes" \
                  --modulepath "/etc/puppet/ltsp"     \
    || [ $? -eq $another_ok_puppetcode ]
}

run_in_chroot() {
  do_mounts                                                        || return $?
  run_with_setarch chroot "$target_dir" env DISABLE_DAEMONS=1 "$@" || return $?
  do_umounts                                                       || return $?
}

run_with_setarch() {
  setarch "$arch" "$@"
}

set_root_password() {
  while true; do
    read -p 'Set root password [y/N] ? ' do_set_rootpw
    case "$do_set_rootpw" in
       '')                       break                       ;;
      Y|y) run_in_chroot passwd; break                       ;;
      N|n)                       break                       ;;
        *) echo 'Simple question, simple answer please!' >&2 ;;
    esac
  done
}

make_release_logos() {
  if [ -x "$target_dir/usr/lib/puavo-ltsp-client/puavo-make-release-logos" ]
  then
    echo "Making release logos..."
    run_in_chroot /usr/lib/puavo-ltsp-client/puavo-make-release-logos
  fi
}

make_image() {
  if [ -x "$target_dir/usr/bin/updatedb" ]; then
    echo 'Running updatedb in chroot'
    run_in_chroot updatedb
  fi

  make_release_logos

  mkdir -p "$images_dir"
  mksquashfs "$target_dir" "$images_dir/${ltspimage_name}.tmp" \
             -noappend \
             -ef ${imagebuild_sources_dir}/config/ltsp-image.excludes \
             -wildcards
  mv "$images_dir/${ltspimage_name}.tmp" "$images_dir/${ltspimage_name}"
  echo "Successfully created a squashfs image: $images_dir/${ltspimage_name}"
}

cleanup() {
  do_umounts 2>/dev/null || true
}

trap cleanup 0 INT TERM

if [ "$(id -u)" -ne 0 ]; then
  echo 'Run me as root' >&2
  exit 1
fi

case "$action" in
  build)
    if [ -e "${target_dir}/tmp/.chroot_build_done" ]; then
      {
        echo "Build for $(basename $target_dir) has already been done."
        echo "Do --cleanup-chroot if you want to throw away the build."
      } >&2
      exit 1
    fi

    build_chroot
    set_debconf_seeds  "$imagetype"
    set_ltspimage_type "$imagetype"
    prepare_puppet     "image::$imagetype"

    $0 --update-chroot                                          \
       --extra-puppet-modules-dirs "$extra_puppet_modules_dirs" \
       --target-dir "$target_dir"

    touch "${target_dir}/tmp/.chroot_build_done"

    $0 --image --release-name "$release_name" $set_root_password \
       --target-dir "$target_dir"
    ;;
  chroot)
    run_in_chroot bash
    ;;
  cleanup-chroot)
    rm -rf "$target_dir"
    ;;
  dist-upgrade)
    run_in_chroot apt-get -y update
    run_in_chroot apt-get -y -o Dpkg::Options::="--force-confold" dist-upgrade
    run_in_chroot apt-get -y clean # to preserve space in build-chroot
    ;;
  image)
    [ -n "$set_root_password" ] && set_root_password
    ask_and_set_image_information "$release_name"
    make_image
    ;;
  puppet-chroot)
    apply_puppet chroot false
    ;;
  puppet-chroot-error-on-change)
    apply_puppet chroot true
    ;;
  puppet-local)
    apply_puppet local false
    ;;
  update-chroot)
    run_in_chroot apt-get -y update
    for action_arg in --puppet-chroot \
                      --dist-upgrade  \
                      --puppet-chroot \
                      --puppet-chroot-error-on-change; do
      $0 $action_arg --extra-puppet-modules-dirs "$extra_puppet_modules_dirs" \
                     --target-dir "$target_dir"
    done
    ;;
esac

exit 0
