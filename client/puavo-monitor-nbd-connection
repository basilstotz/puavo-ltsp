#!/bin/sh

# exit if our root is not an nbd device
grep -qw root=/dev/nbd0 /proc/cmdline || exit 0

nbd_server_host=$(awk -F= '$1 == "NBD_ROOT_HOST" { print $2 }' \
                    /var/cache/ltsp/ltsp_config)

if [ -z "$nbd_server_host" ]; then
  echo 'Could not find the nbd server host' >&2
  exit 1
fi

check_nbd_is_available() {
  expr match "$(nc -w 10 "$nbd_server_host" 10809 < /dev/null)" '^NBDMAGIC' \
    > /dev/null
}

has_nbd_connection() { nbd-client -c /dev/nbd0 > /dev/null; }

nbd_server_check_seems_ok=false

while has_nbd_connection; do
  # The point of running this check periodically is also making sure that
  # the tools for checking nbd availability later are in filesystem cache,
  # so that even if nbd is broken the check should work.  But if the check
  # does not return true here (it should!), it is probably broken somehow
  # and we do not rely on it later.
  if check_nbd_is_available; then
    nbd_server_check_seems_ok=true
  else
    nbd_server_check_seems_ok=false
  fi

  sleep 15
done

# if our check_nbd_is_available -test seems to work, do wait for the
# nbd-server to come up (for up to about eight hours before rebooting...)
if $nbd_server_check_seems_ok; then
  i=0
  while [ $i -lt 28800 ]; do
    check_nbd_is_available && break
    sleep 1
    i=$(($i + 1))
  done
fi

# nbd connection might be down due to reboot/poweroff, so allow for a little
# time for that
sleep 5

# we will try reboot even if we could not ensure nbd-server answers
# (our test may have failed)
logger -p syslog.emerg \
       "Rebooting due to nbd failure (check_ok=$nbd_server_check_seems_ok)"
sleep 2
echo b > /proc/sysrq-trigger

exit 0
