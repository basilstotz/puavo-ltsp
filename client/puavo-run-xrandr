#!/usr/bin/ruby1.9.1

require 'getoptlong'
require 'json'
require 'shellwords'

## Execute `command` repeatedly until success or until the `max`
## number of tries is reached. Return the number of failures. Caller
## can compare it to `max` to check if the `command` was eventually
## executed succesfully.
def system_repeat_until_success(max, *args)
  max.times do |i|
    return i if system(*args)
  end
end

opts = GetoptLong.new(
  ['--user-session', '-u', GetoptLong::NO_ARGUMENT],
  ['--max-repeat-times', '-n', GetoptLong::REQUIRED_ARGUMENT],
  )

max_repeat_times = 20
is_user_session = false

opts.each do |opt, arg|
  case opt
  when '--user-session'
    is_user_session = true
  when '--max-repeat-times'
    max_repeat_times = Integer(arg)
  end
end

if ARGV.length != 0
  STDERR.puts "invalid number of arguments"
  exit 1
end

## This command can be run in two different situtations:
##   1) when display manager has been started
##   2) when desktop session has been started
##
## Now, in the case of a thinclient, the first run is executed on the
## thinclient and the second run on the desktopserver. On the
## desktopserver, using /etc/puavo/device.json for configuring the
## xrandr of the thinclient is obviously wrong. Luckily, user session
## contains also the information of the device the user is using.
if is_user_session
  device = JSON.parse(File.read(ENV['PUAVO_SESSION_PATH']))['device']
else
  device = JSON.parse(File.read('/etc/puavo/device.json'))
end

if device['xrandr_disable'] then
  exit 0
end

connected_displays \
  = %x(xrandr -q).split("\n")                                               \
                 .map { |s| a = s.split; a[1] == "connected" ? a[0] : nil } \
                 .compact

device['xrandr'].each do |xrandconf|
  xrandr_args                = []
  xrandr_direct_command_args = []

  command_spec = Hash[ * Shellwords.shellwords(xrandconf)      \
                                   .map { |s| s.split('=',2) } \
                                   .flatten ]

  command_spec.each do |key, value|
    case key
      when 'command'
        xrandr_direct_command_args = Shellwords.shellwords(value)
      when 'dpi',
           'mode',
           'newmode',
           'orientation',
           'output',
           'rate',
           'reflect',
           'rotate',
           'size'
        xrandr_args += [ "--#{ key }", Shellwords.shellwords(value) ].flatten
    end
  end

  if ! xrandr_args.empty? then
    if command_spec['output'] then
      system_repeat_until_success(max_repeat_times,
                                  'xrandr', *xrandr_args)
    else
      connected_displays.each do |display|
        system_repeat_until_success(max_repeat_times,
                                    'xrandr', '--output', display, *xrandr_args)
      end
    end
  end

  if ! xrandr_direct_command_args.empty? then
    if xrandr_direct_command_args[0] == 'xrandr' then
      xrandr_direct_command_args.slice!(0)
    end
    system_repeat_until_success(max_repeat_times,
                                'xrandr', *xrandr_direct_command_args)
  end
end
