#!/usr/bin/ruby1.9.3

require 'etc'
require 'tmpdir'
require 'fileutils'
require 'rest-client'
require 'dnsruby'
require 'json'

def find_api_server
  begin
    res = Dnsruby::DNS.new
    puavo_domain = read_file('/etc/puavo/domain')

    res.each_resource("_puavo-api._tcp.#{puavo_domain}", "SRV") do |rr|
      if rr.port == 443
	return "https://#{rr.target}"
      else
        return "https://#{rr.target}:#{rr.port}"
      end
    end
  rescue Exception => e
    puts "FAILED: #{e}"
  end

  return nil
end

def read_file(file)
  if File.exists?(file)
    return File.read(file).chomp
  end

  return ""
end

# Get session from puavo-rest using the session id and parse it as JSON.
# The session contains the thinclient's hostname and other information
# that can be useful when setting up the guest session.
def get_session(session_id)
  begin
    api_server = find_api_server
    response = RestClient::Request.execute(:method => :get, :url => "#{api_server}/v3/sessions/#{session_id}", :headers => {"Authorization" => "Bootserver"})

    return JSON.parse(response.to_s)
  rescue Exception => e
    puts "FAIL: #{e}"
  end

  return nil
end

puavo_session_id = STDIN.read.chomp

session = get_session(puavo_session_id)

hostname = session["device"]["hostname"]
hosttype = session["device"]["type"]

if hostname and !hostname.eql?("") and hosttype and hosttype.eql?("thinclient")
  loginname = "guest-#{hostname}"

  begin
    user = Etc.getpwnam(loginname)
  rescue Exception => e
    home = Dir.mktmpdir("#{loginname}-")

    system('/usr/sbin/adduser', '--disabled-password',
				'--no-create-home',
				'--system',
				'--home',  home,
				'--gecos', 'Guest',
				'--group',
				'--shell', '/bin/bash',
				loginname)
  end
end

user = Etc.getpwnam(loginname)

FileUtils.rm_rf home
Dir.mkdir(home, 0700)
FileUtils.chown(user.uid, user.gid, home)
