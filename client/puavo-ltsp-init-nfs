#!/bin/sh

# This script must be run from PAM stack during user login.
#
# The script mounts user home directory from NFS server. The directories 
# are mounted individually for each user from host homedir.<puavo domain>. 
# The script relies on reverse DNS query support in kerberos so that 
# the real server name is not needed for the mount.
#
# If /etc/puavo/device.json contains tag "sambahomes", the mount is done 
# over CIFS from Samba running on the same server.
#
# On LTSP servers NFS mounts are done with lock and soft options to mitigate
# possible NFS problems.

set -e

is_nfs_mounted() {
  mntpoint=$1
  mount | awk -v "mntpoint=$mntpoint" '
	    BEGIN { status = 1 }
	    $3 == mntpoint && ( $5 == "nfs4" || $5 == "cifs" ) { status = 0 }
	    END { exit(status) }
          '
}

PUAVO_HOSTTYPE=$(cat /etc/puavo/hosttype)
PUAVO_DOMAIN=$(cat /etc/puavo/domain)
HOMEDIR_SERVER="homedir.${PUAVO_DOMAIN}"

SAMBAHOMES=$(jq -r '.tags[] | select(. == "sambahomes")' /etc/puavo/device.json)

case "${PUAVO_HOSTTYPE}" in
  ltspserver|fatclient)
    MOUNT_OPTIONS=",nolock,soft"
    DO_MOUNT=true
    ;;
  fatclient)
    DO_MOUNT=true
    ;;
esac

if [ "${DO_MOUNT}" = "true" ]; then
  if [ "${PAM_TYPE}" = "open_session" ]; then
    # rpc.gssd needs a user principal on netboot devices as they do not have
    # machine principals.
    #
    # Install kerberos ticket to root only if root does not have a ticket
    # already.  This works around a problem, when root ticket switches
    # to another (gssd/nfs stuff does not like that (client id changes)
    # and login failures occur).
    #
    # Current kernels seem to cause problems in diskless environments when
    # SETCLIENTID or EXCHANGE_ID calls are done with GSS authentication. As
    # a temporary fix, first do a sec=sys mount of / without a kerberos
    # principal to force SETCLIENTID to be called with auth=sys.
    HOME=$(getent passwd ${PAM_USER}|awk -F : '{print $6}')

    # First check that the dummy /mntroot mountpoint exists

    if ! is_nfs_mounted "/mntroot"; then
      mkdir -p /mntroot

      # If /etc/krb5.keytab exists, we want to do the mounts with the
      # machine credentials, but /mntroot should be done without any
      # credentials.
      #
      # If no machine credentials exist, copy the user credential cache
      # to root.
      if [ -e /etc/krb5.keytab ]; then
        mv /etc/krb5.keytab /etc/krb5.keytab.bu
        rm -f /tmp/krb5cc_0

        mount -t nfs4 -o sec=sys ${HOMEDIR_SERVER}:/ /mntroot

        mv /etc/krb5.keytab.bu /etc/krb5.keytab
      else
        rm -f /tmp/krb5cc_0

        TMP_KRB5CCNAME=$(echo $KRB5CCNAME | sed -e 's/^FILE://')

        mount -t nfs4 -o sec=sys ${HOMEDIR_SERVER}:/ /mntroot

        install -o root -g root -m 600 "$TMP_KRB5CCNAME" /tmp/krb5cc_0
      fi
    fi

    # Then do the real mounts

    if ! is_nfs_mounted ${HOME}; then
      # Request a remote directory for the user (three second timeout, may fail)
      { echo "$PAM_USER" | nc -w 3 "$SERVER" 907; } || true

      mkdir -p "${HOME}"
      chown ${PAM_USER}: "${HOME}"

      if [ "${SAMBAHOMES}" = "sambahomes" ]; then
        mount -t cifs -o "rw,cruid=${PAM_USER},user=${PAM_USER},sec=krb5,noperm,nobrl" "//${HOMEDIR_SERVER}/${PAM_USER}" "${HOME}"
      else
        mount -t nfs4 -o sec=krb5,nodev,nosuid,minorversion=0${MOUNT_OPTIONS} "${HOMEDIR_SERVER}:${HOME}" "${HOME}"
      fi
    fi

    if ! is_nfs_mounted /home/share; then
      mkdir -p "/home/share"
      chmod 755 /home/share

      mount -t nfs4 -o sec=krb5,nodev,nosuid,minorversion=0${MOUNT_OPTIONS} "${HOMEDIR_SERVER}:/home/share" "/home/share"
    fi
  fi
fi

exit 0
