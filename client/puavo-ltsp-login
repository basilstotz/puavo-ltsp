#!/usr/bin/ruby2.2

=begin

This is a small script that can be used on diskless thin clients
to cache passwd and group info from LDAP locally at login time.
It requires kerberos authentication with pam_krb5.so to be done
before calling. The script first queries the DNS server for LDAP 
SRV record _ldap._tcp.#{puavo_domain} and connects the first LDAP
server returned. If it does not respond, LDAP slave and master 
servers are contacted. If bind dn and password are available, 
they are used when contacting the servers, otherwise SASL GSSAPI 
authentication is used.

NOTE: The script always uses ldap+start_tls to connect and CA
certificates need to be configured properly in /etc/ldap/ldap.conf

The script checks for the following env variables:

PAM_KRB5CCNAME - set by pam_krb5, contents are copied to KRB5CCNAME
PAM_USER       - passwd and group info is fetched for this user

The following Puavo settings need to be set:

/etc/puavo/ldap/base   - LDAP base, e.g. dc=edu,dc=example,dc=org
/etc/puavo/ldap/master - LDAP master server fqdn

The following Puavo settings are optional and used if they are set:
/etc/puavo/ldap/slave    - LDAP slave server
/etc/puavo/ldap/dn       - DN used to bind to LDAP servers with simple bind
/etc/puavo/ldap/password - Password used for simple binds

The script writes the following files for libnss-extrausers:

/var/lib/extrausers/passwd
/var/lib/extrausers/group

Configuration examples:

/etc/nsswitch.conf:

passwd:         compat extrausers
group:          compat extrausers
shadow:         compat

/etc/pam.d/service:

auth    required          pam_krb5.so minimum_uid=1000 debug use_first_pass
auth    optional          pam_exec.so /usr/local/sbin/puavo_pam_login

/etc/ldap/ldap.conf:

BASE		dc=edu,dc=example,dc=fi
NETWORK_TIMEOUT	15
SASL_MECH	GSSAPI
TIMEOUT		15
TLS_CACERT	/etc/ssl/certs/example-ca.crt
TLS_REQCERT	demand
URI		ldap://ldap.example.org


On Ubuntu 12.04 the following packages are needed:

sudo apt-get install libnss-extrausers ruby2.2 ruby-ldap ruby-dnsruby

=end

require 'ldap'
require 'etc'
require 'dnsruby'

# Needed when reading from /var/lib/extrausers/{passwd,group}, which
# may contain utf-8 sequences in displayName.
Encoding.default_external = 'utf-8'

class DesktopSettings
  attr_accessor :preferredLanguage

  def initialize(user)
    @preferredLanguage = nil
    @user = user
  end

  def environment
    env_file_path = "/var/lib/puavo-desktop/users/#{ @user }/environment"

    # XXX should use puavo-client, this is copied from it:
    locales_by_lang = {
      'de' => 'de_DE.UTF-8',
      'en' => 'en_GB.UTF-8',
      'fi' => 'fi_FI.UTF-8',
      'fr' => 'fr_FR.UTF-8',
      'ru' => 'ru_RU.UTF-8',
      'sv' => 'sv_FI.UTF-8',
    }
    locale = locales_by_lang[@preferredLanguage]

    if locale
      begin
        Dir.mkdir(File.dirname(env_file_path))
      rescue Errno::EEXIST
      end
      File.open("#{ env_file_path }.tmp", 'w') do |f|
        f.print "LANG=#{ locale }\n"
        f.print "LANGUAGE=#{ @preferredLanguage }\n"
        f.print "DCONF_PROFILE=user-#{ @preferredLanguage }\n"
      end
      File.rename("#{ env_file_path }.tmp", env_file_path)
    else
      File.delete(env_file_path) rescue true
    end
  end

  def update
    self.environment
  end
end

def connect_server(ldap_server, ldap_port, suffix, uid, binddn, bindpw)
  begin
    return false if !ldap_server or ldap_server.eql?("")

    conn = LDAP::Conn.new(host=ldap_server, port=ldap_port)
    conn.set_option(LDAP::LDAP_OPT_PROTOCOL_VERSION, 3)
    conn.start_tls

    if binddn and bindpw
      conn.bind(binddn, bindpw)
    else
      conn.sasl_bind("", "GSSAPI")
    end

    if conn.bound?
      passwd = Hash.new
      group = Hash.new
      desktop_settings = DesktopSettings.new(uid)

      if File.exists?("/var/lib/extrausers/passwd")
        File.open("/var/lib/extrausers/passwd", "r").each_line do |line|
          entry = line.split(":")
          passwd[entry[0]] = line
        end
      end

      if File.exists?("/var/lib/extrausers/group")
        File.open("/var/lib/extrausers/group", "r").each_line do |line|
          entry = line.split(":")
          group[entry[0]] = line
        end
      end

      conn.search("ou=People,#{suffix}", LDAP::LDAP_SCOPE_SUBTREE, "(&(objectClass=posixAccount)(uid=#{uid}))", ["uid", "uidNumber", "gidNumber", "homeDirectory", "displayName", "preferredLanguage"]) {|e|
        if e.get_values('uid') and e.get_values('uidNumber') and
           e.get_values('gidNumber') and e.get_values('homeDirectory') and
           e.get_values('displayName')

          uid = e.get_values('uid')[0]
          uidNumber = e.get_values('uidNumber')[0]
          gidNumber = e.get_values('gidNumber')[0]
          # Temporary override until old LDAP attributes have been migrated
#          homeDirectory = e.get_values('homeDirectory')[0]
          homeDirectory = "/home/#{uid}"
          displayName = e.get_values('displayName')[0]
          desktop_settings.preferredLanguage = e.get_values('preferredLanguage')[0] if e.get_values('preferredLanguage')

          passwd[uid] = "#{uid}:x:#{uidNumber}:#{gidNumber}:#{displayName}:#{homeDirectory}:/bin/bash"
        end
      }

      conn.search("ou=Groups,#{suffix}", LDAP::LDAP_SCOPE_SUBTREE, "(&(objectClass=posixGroup)(memberUid=#{uid}))", ["gidNumber", "cn"]) {|e|
        if e.get_values('gidNumber') and
           e.get_values('cn')

          gidNumber = e.get_values('gidNumber')[0]
          cn = e.get_values('cn')[0]

          members = Array.new
          members << uid

          if group[cn]
            tmp = group[cn].chomp.split(":")[3]
            members.concat tmp.split(",")
          end

          group[cn] = "#{cn}:x:#{gidNumber}:#{members.uniq.join(',')}"
        end
      }

      File.open("/var/lib/extrausers/passwd", "w") do |file|
        passwd.each_value do |entry|
          file.puts entry
        end
      end

      File.open("/var/lib/extrausers/group", "w") do |file|
        group.each_value do |entry|
          file.puts entry
        end
      end

      begin
        desktop_settings.update
      rescue Exception => e
        $stderr.puts "Could not update desktop settings: #{ e.message }\n"
      end

      return true
    end
  rescue LDAP::ResultError
    conn.perror("LDAP connection failed")
    return false
  end  
end

def read_file(file)
  if File.exists?(file)
    begin
      return File.read(file).chomp
    rescue
    end
  end

  return nil
end

uid = ENV['PAM_USER']

if !uid or uid.eql?("root")  
  exit(0)
end

suffix = read_file('/etc/puavo/ldap/base')
ldap_master = read_file('/etc/puavo/ldap/master')
ldap_slave = read_file('/etc/puavo/ldap/slave')
puavo_domain = read_file('/etc/puavo/domain')
binddn = read_file('/etc/puavo/ldap/dn')
bindpw = read_file('/etc/puavo/ldap/password')

dname = "_ldap._tcp.#{puavo_domain}"
res   = Dnsruby::DNS.new
ldap_srv = Hash.new

begin
  res.each_resource(dname, 'SRV') { |rr|
    ldap_srv[rr.priority] = rr.target.to_s
  }
rescue Exception => e
  print "Can't find SRV records for #{dname}: ", e, "\n"
end

servers = Array.new

ldap_srv.keys.sort.each do |key|
  servers << ldap_srv[key]
end

servers << ldap_slave
servers << ldap_master

if !ENV['KRB5CCNAME']
  ENV['KRB5CCNAME'] = ENV['PAM_KRB5CCNAME']
end

done = false

servers.each do |server|
  break if connect_server(server, 389, suffix, uid, binddn, bindpw)
end

exit(0)
