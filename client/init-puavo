#!/bin/sh

# list files in a directory consisting only of alphanumerics, hyphens and
# underscores
# $1 - directory to list
# $2 - optional prefix to limit which files are selected
run_parts_list() {
    test $# -ge 1 || {
        echo "ERROR: Usage: run_parts_list <dir>" >&2
        exit 1
    }
    if [ -d "$1" ]; then
        find -L "$1" -mindepth 1 -maxdepth 1 -type f -name "$2*" |
            sed -n '/.*\/[0-9a-zA-Z_\-]\{1,\}$/p' | sort -n
    fi
}

boolean_is_true(){
    case $1 in
       # match all cases of true|y|yes
       [Tt][Rr][Uu][Ee]|[Yy]|[Yy][Ee][Ss]) return 0 ;;
       *) return 1 ;;
    esac
}


#. /usr/share/ltsp/ltsp-client-functions
scriptsdir="/usr/share/puavo-ltsp/init-puavo.d"

# workaround Debian bug in initramfs-tools:
# http://bugs.debian.org/660297
mountpoint -q /sys || mount -t sysfs -o nodev,noexec,nosuid sysfs /sys
mountpoint -q /proc || mount -t proc -o nodev,noexec,nosuid proc /proc

# Provide an ltsp.break=<script-name> kernel parameter which will offer a shell
# right before sourcing that script.
for x in $(cat /proc/cmdline); do
    case "$x" in
        ltsp.break=*)
            breakscript="$scriptsdir/${x#ltsp.break=}"
            ;;
        puavo.hosttype=*)
            puavo_hosttype="${x#puavo.hosttype=}"
            ;;
    esac
done

mkdir -p /etc/puavo
echo "${puavo_hosttype}" > /etc/puavo/hosttype
export PUAVO_HOSTTYPE=${puavo_hosttype}

for script in $(run_parts_list "$scriptsdir") ; do
    if [ "$script" = "$breakscript" ]; then
        echo "Spawning shell before $script" >&2
        bash -l
        echo "Continuing ltsp-init execution" >&2
    fi
    . "$script"
done

# init=/sbin/init-puavo can be used to launch this script, which should then
# chain to /sbin/init.
# To run it from the initramfs instead, set the EXEC_INIT environment variable
# to "false".
if [ "$EXEC_INIT" != "false" ]; then
    exec /sbin/init
fi
