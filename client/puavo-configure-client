#!/usr/bin/ruby

require 'erb'
require 'json'
require 'fileutils'

def delete_file(file)
  if File.exists?(file)
    File.delete(file)
  end
end

def read_file(file)
  if File.exists?(file)
    return File.read(file).chomp
  end

  return ""
end

def append_tags_to_environment(tags)
  begin
    File.open('/etc/environment', 'a') do |f|
      tags.each do |tag|
        if tag.match(/\A[[:alpha:]_]+\Z/) then
          f.puts "PUAVO_TAG_#{ tag.upcase }=1"
        end
      end
    end
  rescue StandardError => e
    warn "Could not append puavo tags to /etc/environment: #{ e.message }"
  end
end

def write_config(filename, version=nil, secure=false)
  begin
    template_file = filename

    if version
      template_file = "#{filename}-#{version}"
    end

    conf_template = File.read("/usr/share/puavo-ltsp-client/templates#{template_file}")
    conf = ERB.new(conf_template, 0, "%<>")

    perm = secure ? 0600 : 0644

    File.open(filename, "w", perm) do |f|
      f.write conf.result
    end

    File.chmod(perm, filename)
  rescue StandardError => e
    $stderr.puts "FAILED to write: #{filename} from /usr/share/puavo-ltsp-client/templates#{template_file}: #{e}"
  end
end

@puavo_device_type = ARGV[0]

if (!@puavo_device_type)
  if File.exists?("/etc/puavo/hosttype")
    @puavo_device_type = File.read('/etc/puavo/hosttype').chomp
  end
end

@default_xsession = 'puavo-desktop-session'
@device = {}
@tags = []

Uninstalled_device_types = %w(diskinstaller preinstalled unregistered)
if Uninstalled_device_types.include?(@puavo_device_type) then
  `hostname #{ @puavo_device_type }`
  `echo #{ @puavo_device_type } > /proc/sys/kernel/hostname`
  `echo #{ @puavo_device_type } > /etc/hostname`

  if @puavo_device_type == 'preinstalled' then
    write_config("/etc/lightdm/lightdm.conf")
    write_config("/etc/pam.d/lightdm-autologin", "preinstalled")
    write_config("/etc/sudoers.d/puavo-install-when-preinstalled")
    write_config("/etc/xdg/autostart/puavo-install.desktop")
  end

  exit(0)
end

@ldap_master       = read_file('/etc/puavo/ldap/master')
@ldap_slave        = read_file('/etc/puavo/ldap/slave')
@ldap_base         = read_file('/etc/puavo/ldap/base')
@kerberos_master   = read_file('/etc/puavo/kerberos/master')
@kerberos_realm    = read_file('/etc/puavo/kerberos/realm' )
@kerberos_toprealm = read_file('/etc/puavo/kerberos/toprealm' )
@puavo_hostname    = read_file('/etc/puavo/hostname')
@puavo_domain      = read_file('/etc/puavo/domain')
@puavo_topdomain   = read_file('/etc/puavo/topdomain')

if File.exists?("/etc/puavo/device.json")
  @device = JSON.parse( File.read("/etc/puavo/device.json") )
  @tags   = @device["tags"] || []

  append_tags_to_environment(@tags)
end

@tags.each() do |tag|
  if tag.start_with? 'default_xsession:' then
    @default_xsession = tag.sub(/^default_xsession:/, '')
    break
  end
end

@enable_suspend =                \
  @puavo_device_type == 'laptop' \
    && (! @tags.include?('nosuspend') || @tags.include?('no_nosuspend'))

@enable_lidsuspend =             \
  @puavo_device_type == 'laptop' \
    && @enable_suspend           \
    && (! @tags.include?('nolidsuspend') || @tags.include?('no_nolidsuspend'))

def try_writing_puavomounts()
  begin
    conflines = []

    mountpoints = @device['mountpoints']
    if mountpoints.nil? || !mountpoints.kind_of?(Array) then
      warn 'Device mountpoints list is not an array'
      return
    end

    mountpoints.each do |mountinfo|
      if mountinfo.nil? || !mountinfo.kind_of?(Hash) then
	warn 'Mountpoint information is not a hash structure'
	next
      end

      fs         = mountinfo['fs']
      mountpoint = mountinfo['mountpoint']
      options    = mountinfo['options']
      path       = mountinfo['path']

      if mountpoint.nil? || mountpoint.empty? then
	warn "A mountpoint is not set for:\n#{ m.inspect }"
	next
      end

      if path.nil? || path.empty? then
	warn "A path is not set for:\n#{ m.inspect }"
	next
      end

      # set "auto" be the default filesystem type
      fs = (!fs.nil? && !fs.empty? && fs) || 'auto'
      if !fs.kind_of?(String) then 
	 warn "Filesystem info is not a string for:\n#{ m.inspect }"
	 next
      end

      options = !options.nil? ? options : ''
      if !options.kind_of?(String) then 
	 warn "Mountpoint options is not a string for:\n#{ m.inspect }"
	 next
      end

      autofs_options = "-fstype=#{ fs },nodev,nosuid"
      if !options.empty? then
	autofs_options << ",#{ options }"
      end

      conflines << [ mountpoint, autofs_options, path ].join(' ')
    end

    autofs_configuration = conflines.map { |s| "#{ s }\n" }.join('')

    File.open('/var/lib/puavo-desktop/puavomounts', 'w') do |f|
      f.print(autofs_configuration)
    end

    begin
      Dir.mkdir('/etc/auto.master.d')
    rescue Errno::EEXIST
    end

    File.open('/etc/auto.master.d/puavomounts.autofs', 'w') do |f|
      f.print("/- /var/lib/puavo-desktop/puavomounts\n")
    end
  rescue StandardError => e
    warn "Could not write puavomounts autofs configuration: #{ e.message }"
  end
end

begin
  Dir.mkdir('/etc/cups')
rescue Errno::EEXIST
end

`hostname #{@puavo_hostname}`
`echo #{@puavo_hostname} > /proc/sys/kernel/hostname`
`echo #{@puavo_hostname} > /etc/hostname`

write_config("/etc/hosts")

# XXX This ugliness must be, because /var/lib/puavo-desktop/shared may reside
# XXX on /state partition, and its concept of uids/gids may not match the
# XXX current image (there should be some solution to this ugliness).
FileUtils.chown('puavodesktop',
                'puavodesktop',
                '/var/lib/puavo-desktop/shared')

case @puavo_device_type
  when "thinclient"
    write_config("/etc/nsswitch.conf", "extrausers")
    write_config("/etc/pam.d/lightdm", "thinclient")
    write_config("/etc/pam.d/lightdm-autologin", "thinclient")
    write_config("/etc/ldap/ldap.conf")
    write_config("/etc/lightdm/lightdm.conf")
    write_config("/etc/krb5.conf")
    write_config("/etc/idmapd.conf")
    write_config("/etc/default/nfs-common")
    write_config("/etc/init/gssd.conf", "userprincipal")
    write_config("/etc/cups/client.conf")
    write_config("/etc/dbus-1/system.d/org.freedesktop.login1.conf")
    write_config("/etc/rsyslog.conf")
    write_config("/etc/rsyslog.d/send_to_syslogserver.conf")

    delete_file('/usr/share/dbus-1/system-services/fi.epitest.hostap.WPASupplicant.service')
    delete_file('/usr/share/dbus-1/system-services/fi.w1.wpa_supplicant1.service')

    # Temporary hack until ltsp-lightdm is not used anymore
    `cp /usr/lib/puavo-ltsp-client/puavo-thin-guest-account /usr/sbin/guest-account`
#    `cp /usr/lib/puavo-ltsp-client/puavo-desktop-guest-session /usr/share/ltsp-lightdm/xsession-stub`

    # Temporary hack to get ltspfs working with thin guest sessions
    write_config("/lib/udev/ltspfs_entry")
    File.chmod(0755, "/lib/udev/ltspfs_entry")
  when "fatclient"
    write_config("/etc/nsswitch.conf", "extrausers")
    write_config("/etc/pam.d/lightdm", "fatclient")
    write_config("/etc/pam.d/lightdm-autologin", "fatclient")
    write_config("/etc/ldap/ldap.conf")
    write_config("/etc/lightdm/lightdm.conf")
    write_config("/etc/krb5.conf")
    write_config("/etc/idmapd.conf")
    write_config("/etc/default/nfs-common")
    write_config("/etc/init/gssd.conf", "userprincipal")
    write_config("/etc/cups/cupsd.conf")
    write_config("/etc/security/group.conf")
    write_config("/etc/dbus-1/system.d/org.freedesktop.login1.conf")
    write_config("/etc/rsyslog.conf")
    write_config("/etc/rsyslog.d/send_to_syslogserver.conf")

    if @tags.include?("webkiosk") then
      write_config("/etc/polkit-1/localauthority/50-local.d/90.org.freedesktop.networkmanager.deny_in_webkiosk_mode.pkla")
    end

    `cp /usr/lib/puavo-ltsp-client/puavo-thin-guest-account /usr/sbin/guest-account`
#    `cp /usr/lib/puavo-ltsp-client/puavo-desktop-guest-session /usr/share/ltsp-lightdm/xsession-stub`

    delete_file('/usr/share/dbus-1/system-services/fi.epitest.hostap.WPASupplicant.service')
    delete_file('/usr/share/dbus-1/system-services/fi.w1.wpa_supplicant1.service')

    try_writing_puavomounts()
  when "ltspserver"
    write_config("/etc/hosts", "ltspserver")
    write_config("/etc/nsswitch.conf", "ldap")
    write_config("/etc/pam.d/ltspguestsshd")
    write_config("/etc/pam.d/ltspsshd")
    write_config("/etc/ldap/ldap.conf")
    write_config("/etc/krb5.conf")
    write_config("/etc/idmapd.conf")
    write_config("/etc/default/nfs-common")
    write_config("/etc/ssh/sshd_config")
    write_config("/etc/cups/client.conf")
    write_config("/etc/ntp.conf")
    write_config("/etc/dbus-1/system.d/org.freedesktop.login1.conf")

    @ldap_binddn       = read_file('/etc/puavo/ldap/dn')
    @ldap_bindpw       = read_file('/etc/puavo/ldap/password')
    write_config("/etc/nscd.conf")
    write_config("/etc/nslcd.conf", nil, true)
    File.chmod(0640, "/etc/nslcd.conf")
    FileUtils.chown("root", "nslcd", "/etc/nslcd.conf")

    # http://askubuntu.com/questions/117127/flash-video-appears-blue
    # FIXME - do this in ruby instead of perl
    `perl -pi -e 's/libvdpau/lixvdpau/g' /usr/lib/adobe-flashplugin/libflashplayer.so`

    delete_file('/usr/share/dbus-1/system-services/fi.epitest.hostap.WPASupplicant.service')
    delete_file('/usr/share/dbus-1/system-services/fi.w1.wpa_supplicant1.service')

    File.open('/etc/inetd.conf', 'a') do |f|
      f.write("908  stream  tcp     nowait  root    /usr/sbin/tcpd  /usr/lib/puavo-ltsp-client/puavo-ltspserver-create-guest\n")
    end

    try_writing_puavomounts()
  when "laptop"
    write_config("/etc/cups/cupsd.conf")
    write_config("/etc/dbus-1/system.d/org.freedesktop.login1.conf")
    write_config("/etc/nsswitch.conf", "sss-extrausers")
    write_config("/etc/krb5.conf", "laptop")
    write_config("/etc/idmapd.conf")
    write_config("/etc/ldap/ldap.conf", "laptop")
    write_config("/etc/lightdm/lightdm.conf")
    write_config("/etc/pam.d/lightdm", "laptop")
    write_config("/etc/pam.d/lightdm-autologin", "laptop")
    write_config("/etc/racoon/racoon.conf")
    write_config("/etc/security/group.conf")
    write_config("/etc/samba/smb.conf", "laptop")
    write_config("/etc/ntp.conf")
    write_config("/etc/systemd/logind.conf")
    write_config("/var/lib/polkit-1/localauthority/10-vendor.d/com.ubuntu.desktop.pkla")

    if @tags.include?("webkiosk") then
      write_config("/etc/polkit-1/localauthority/50-local.d/90.org.freedesktop.networkmanager.deny_in_webkiosk_mode.pkla")
    end

    @ldap_binddn       = read_file('/etc/puavo/ldap/dn')
    @ldap_bindpw       = read_file('/etc/puavo/ldap/password')

    write_config("/etc/sssd/sssd.conf", "laptop", true)

    # Make sure that the nss-extrausers database files exist so that
    # sssd does not go into offline mode when using extrausers proxy
    ["/var/lib/extrausers/passwd", "/var/lib/extrausers/group"].each do |filename|
      if !File.exists?(filename)
        File.open(filename, "w") {|f| }
      end
    end

    # Laptops also want the NetworkManager configurations to be done before
    # it starts.  Should that be integrated here is an interesting question,
    # but right now the puavo-update-nm-configurations script loads fileutils
    # and json modules, which would needlessly slow down this script for other
    # host types that do not need this.
    system('puavo-update-nm-configurations')
  when "wirelessaccesspoint"
    wired_interfaces                                                 \
      = Dir.glob('/sys/class/net/eth*')                              \
           .select { |path| not File.exists?("#{ path }/phy80211") } \
           .map    { |path| File.basename(path) }

    File.open('/etc/network/interfaces', 'a') do |file|
      wired_interfaces.each do |interface|
        file.write("\nauto #{ interface }\niface #{ interface } inet dhcp\n")
      end
    end

    # wirelessaccesspoints may be used as infotv devices depending on device
    # tags.
    write_config("/etc/lightdm/lightdm.conf")
    write_config("/etc/pam.d/lightdm-autologin", "wirelessaccesspoint")
    write_config("/etc/ntp.conf")

    # turn infotv displays on and off
    if @tags && @tags.include?('infotv') then
      write_config("/etc/cron.d/infotv_display_control")
    end
end

exit(0)
