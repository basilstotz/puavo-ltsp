#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import appindicator
import errno
import fcntl
import getpass
import gettext
import gobject
import gtk
import json
import os
import subprocess
import sys

gettext.bindtextdomain('puavo-remote-assistance-applet', '/usr/share/locale')
gettext.textdomain('puavo-remote-assistance-applet')
_tr = gettext.gettext

class RemoteAccessHandler:
    def enable_remote_access(self):
        self.enable_gnome_remote_access()
        self.enable_ssh_remote_access()


    def enable_gnome_remote_access(self):
        dconf_values = {
          '/org/gnome/desktop/remote-access/enabled':            "true",
          '/org/gnome/desktop/remote-access/icon-visibility':    "'client'",
          '/org/gnome/desktop/remote-access/network-interface':  "'tap0'",
          '/org/gnome/desktop/remote-access/notify-on-connect':  "true",
          '/org/gnome/desktop/remote-access/prompt-enabled':     "true",
          '/org/gnome/desktop/remote-access/require-encryption': "true",
          '/org/gnome/desktop/remote-access/view-only':          "false",
        }

        self.set_dconf_values(dconf_values)

        subprocess.Popen([ '/usr/lib/vino/vino-server', '--sm-disable' ],
                         close_fds=True)


    def enable_ssh_remote_access(self):
        self.call_puavo_admin_remote_connections([ '--accept-incoming' ])


    def check_gnome_remote_access(self):
        dconf_key = '/org/gnome/desktop/remote-access/enabled'
        out = subprocess.check_output([ 'dconf', 'read', dconf_key ])

        return (out.rstrip(os.linesep) == 'true')


    def check_ssh_remote_access(self):
        args = [ '--is-incoming-accepted' ]
        status = self.call_puavo_admin_remote_connections(args)

        return (status.rstrip(os.linesep) == 'yes')


    def disable_remote_access(self):
        self.disable_gnome_remote_access()
        self.disable_ssh_remote_access()


    def disable_gnome_remote_access(self):
        dconf_values = {
          '/org/gnome/desktop/remote-access/enabled':            "false",
          '/org/gnome/desktop/remote-access/icon-visibility':    "'client'",
          '/org/gnome/desktop/remote-access/network-interface':  "''",
          '/org/gnome/desktop/remote-access/notify-on-connect':  "true",
          '/org/gnome/desktop/remote-access/prompt-enabled':     "true",
          '/org/gnome/desktop/remote-access/require-encryption': "true",
          '/org/gnome/desktop/remote-access/view-only':          "true",
        }

        self.set_dconf_values(dconf_values)

        user = getpass.getuser()
        subprocess.call([ 'pkill', '-x', '-U', user, 'vino-server' ])


    def disable_ssh_remote_access(self):
        self.call_puavo_admin_remote_connections([ '--reject-incoming' ])


    def call_puavo_admin_remote_connections(self, cmdargs):
        cmdpath = '/usr/lib/puavo-ltsp-client/puavo-admin-remote-connections'
        return subprocess.check_output([ cmdpath ] + cmdargs)


    def set_dconf_values(self, dconf_values):
        for key, value in dconf_values.iteritems():
            subprocess.check_call([ 'dconf', 'write', key, value ])



class RemoteAssistanceApplet:
    def __init__(self, access_handler, config):
        self.access_handler = access_handler
        self.config         = config

        self.indicator \
            = appindicator.Indicator('remote-assistance',
                                     'puavoremoteaccess-grey',
                                     appindicator.CATEGORY_COMMUNICATIONS)

        self.indicator.set_status(appindicator.STATUS_ACTIVE)

        self.latest_gnome_enabled = None
        self.latest_ssh_enabled   = None

        self.menu = None

        # creates menu as a side effect
        self.check_for_changed_settings()

        gobject.timeout_add_seconds(5, self.check_for_changed_settings)


    def check_for_changed_settings(self):
        # XXX We poll because we may lack inotify (nfs, overlayfs)
        # XXX and thus smarter solutions may not work.

        old_latest_gnome_enabled = self.latest_gnome_enabled
        old_latest_ssh_enabled   = self.latest_ssh_enabled

        self.latest_gnome_enabled \
          = self.access_handler.check_gnome_remote_access()
        self.latest_ssh_enabled \
          = self.access_handler.check_ssh_remote_access()

        settings_changed \
          = old_latest_gnome_enabled != self.latest_gnome_enabled \
              or old_latest_ssh_enabled != self.latest_ssh_enabled

        if settings_changed:
            self.create_menu()

        return True


    def create_menu(self):
        if self.menu:
            self.menu.destroy()

        self.menu = gtk.Menu()

        gnome_enabled = self.access_handler.check_gnome_remote_access()
        ssh_enabled   = self.access_handler.check_ssh_remote_access()

        if gnome_enabled:
           if ssh_enabled:
               access_state_msg = _tr('Remote access allowed')
               indicator_icon   = 'puavoremoteaccess-green'
           else:
               access_state_msg = _tr('VNC allowed / SSH denied')
               indicator_icon   = 'puavoremoteaccess-cyan'
        else:
           if ssh_enabled:
               access_state_msg = _tr('VNC denied / SSH allowed')
               indicator_icon   = 'puavoremoteaccess-yellow'
           else:
               access_state_msg = _tr('Remote access denied')
               indicator_icon   = 'puavoremoteaccess-grey'

        self.indicator.set_icon(indicator_icon)

        self.access_status_label = gtk.MenuItem('-=> %s <=' % access_state_msg)
        self.access_status_label.set_sensitive(False)
        self.access_status_label.show()
        self.menu.append(self.access_status_label)

        show_disable_button =     gnome_enabled or     ssh_enabled
        show_enable_button  = not gnome_enabled or not ssh_enabled

        if show_enable_button:
            self.enable_access_button \
              = gtk.MenuItem( _tr('Enable remote access') )
            self.enable_access_button.connect('activate',
                                              self.enable_remote_access)
            self.enable_access_button.show()
            self.menu.append(self.enable_access_button)

        if show_disable_button:
            self.disable_access_button \
              = gtk.MenuItem( _tr('Disable remote access') )
            self.disable_access_button.connect('activate',
                                               self.disable_remote_access)
            self.disable_access_button.show()
            self.menu.append(self.disable_access_button)

        make_bugreport_button = self.config['new-bugreport-browser'] \
                                  and self.config['new-bugreport-url']
        if make_bugreport_button:
            self.new_ticket_button = gtk.MenuItem( _tr('New support request') )
            self.new_ticket_button.connect('activate', self.make_bugreport)
            self.new_ticket_button.show()
            self.menu.append(self.new_ticket_button)

        self.indicator.set_menu(self.menu)


    def disable_remote_access(self, widget):
        self.access_handler.disable_remote_access()
        self.create_menu()


    def enable_remote_access(self, widget):
        self.access_handler.enable_remote_access()
        self.create_menu()

    def make_bugreport(self, widget):
        browser = self.config['new-bugreport-browser']
        url     = self.config['new-bugreport-url']

        if browser == 'firefox':
            cmd = [ browser, '-new-window', url ]
        else:
            cmd = [ browser, url ]

        subprocess.Popen(cmd, close_fds=True)


with open('/etc/puavo-remote-assistance-applet/config.json') as file:
    config = json.load(file)

access_handler = RemoteAccessHandler()

for arg in sys.argv[1:]:
    if arg == '--enable':
        access_handler.enable_remote_access()
    elif arg == '--disable':
        access_handler.disable_remote_access()
    else:
        print('Unknown argument: %s' % arg, file=sys.stderr)
        sys.exit(1)

applet = RemoteAssistanceApplet(access_handler, config)
gtk.main()
