#!/usr/bin/ruby2.1

=begin

This is a small script that can be used on diskless thin clients
to cache passwd and group info from Puavo locally at login time.
It uses the puavo session in file 
/var/lib/puavo-desktop/users/PAM_USER/puavo_session.json. If the 
file does not exist or is corrupted, no changes are made and the
error is logged to syslog.

The script writes the following files for libnss-extrausers:

/var/lib/extrausers/passwd
/var/lib/extrausers/group

Configuration examples:

/etc/nsswitch.conf:

passwd:         compat extrausers
group:          compat extrausers
shadow:         compat

/etc/pam.d/service:

auth    required          pam_krb5.so minimum_uid=1000
auth    optional          pam_envfeed.so prog=/usr/lib/puavo-ltsp-client/populate-extrausers

=end

require 'json'
require 'syslog'
require 'etc'

def log(message)
  Syslog.open("puavo-ltsp-client/populate-extrausers", Syslog::LOG_CONS) do |s|
    s.warning('%s', message)
  end
end

CACHE_DIR="/var/lib/puavo-desktop/users/#{ENV['PAM_USER']}"
CACHE_FILE="#{CACHE_DIR}/puavo_session.json"

if !File.exists?(CACHE_FILE)
  log "#{CACHE_FILE} does not exist, not populating extrausers passwd and group files"
  exit(0)
end

begin
  # Needed when reading from /var/lib/extrausers/{passwd,group}, which
  # may contain utf-8 sequences in displayName.
  Encoding.default_external = 'utf-8'

  json = File.read(CACHE_FILE)
  session = JSON.parse(json)

  passwd = Hash.new
  groups = Hash.new

  if File.exists?("/var/lib/extrausers/passwd")
    File.open("/var/lib/extrausers/passwd", "r").each_line do |line|
      entry = line.split(":")
      passwd[entry[0]] = line
    end
  end

  if File.exists?("/var/lib/extrausers/group")
    File.open("/var/lib/extrausers/group", "r").each_line do |line|
      entry = line.split(":")
      groups[entry[0]] = line
    end
  end

  user = session['user']
  passwd[user['username']] = "#{user['username']}:x:#{user['uid_number']}:#{user['gid_number']}:#{user['first_name']} #{user['last_name']}:/home/#{user['username']}:/bin/bash"

  session['user']['groups'].each do |user_group|
    group = groups[user_group['abbreviation']]

    members = Array.new
    members << user['username']

    if group
      members.concat (group.chomp.split(":")[3]).split(",")
    end

    groups[user_group['abbreviation']] = "#{user_group['abbreviation']}:x:#{user_group['gid_number']}:#{members.uniq.join(',')}"
  end

  File.open("/var/lib/extrausers/passwd", "w") do |file|
    passwd.each_value do |entry|
      file.puts entry
    end
  end

  File.open("/var/lib/extrausers/group", "w") do |file|
    groups.each_value do |entry|
      file.puts entry
    end
  end

  # We need to query the user once to get sssd to store 
  # the user authentication info for offline usage.
  user = Etc.getpwnam(user['username'])
rescue Exception => e
  log "Updating extrausers passwd and group failed: #{e}"
end

exit(0)
