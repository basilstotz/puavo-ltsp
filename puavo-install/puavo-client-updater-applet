#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import datetime
import gettext
gettext.bindtextdomain('puavo-client-updater-applet', '/usr/share/locale')
gettext.textdomain('puavo-client-updater-applet')
_tr = gettext.gettext

import sys
import gtk
import appindicator
import dbus
import dbus.mainloop.glib
dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

import re

class UpdateIndicatorApplet:
    def __init__(self):
        self.indicator = appindicator.Indicator("update-indicator",
                                                "update-idle",
                                                appindicator.CATEGORY_APPLICATION_STATUS)
        self.indicator.set_status(appindicator.STATUS_ACTIVE)

        self.menu = gtk.Menu()

        self.view_log_item = gtk.MenuItem(_tr("View log..."))
        self.view_log_item.connect("activate", self.view_log)
        self.view_log_item.show()
        self.menu.append(self.view_log_item)

        self.update_image_item = gtk.MenuItem(_tr("(Up to date)"))
        self.update_image_item.connect("activate", self.update_image)
        self.update_image_item.show()
        self.update_image_item.set_sensitive(False)
        self.menu.append(self.update_image_item)

        self.indicator.set_menu(self.menu)

        self.bus = dbus.SystemBus()
        self.updater = self.bus.get_object('org.puavo.client.Daemon',
                                           '/updater')
        self.update_iface = dbus.Interface(self.updater,
                                           dbus_interface='org.puavo.client.update')
        self.update_iface.connect_to_signal("UpdateAvailable",
                                            self.on_update_available)
        self.update_iface.connect_to_signal("UpdateCompleted",
                                            self.on_update_completed)
        self.update_iface.connect_to_signal("UpdateStarted",
                                            self.on_update_started)
        self.update_iface.connect_to_signal("UpdateFailed",
                                            self.on_update_failed)

        self.log_dialog = gtk.Dialog(title=_tr("Update log"), parent=None,
                                     flags=gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                                     buttons=(gtk.STOCK_OK, gtk.RESPONSE_ACCEPT))
        self.log_dialog.set_default_size(600, 300)
        self.log_buffer = gtk.TextBuffer()
        self.log_error_tag = self.log_buffer.create_tag(foreground="red", left_margin=20)
        self.log_view = gtk.TextView(self.log_buffer)
        self.log_view.set_editable(False)
        self.log_view.set_cursor_visible(False)
        self.log_view.show()
        log_scroll = gtk.ScrolledWindow()
        log_scroll.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        log_scroll.add(self.log_view)
        log_scroll.show()
        self.log_dialog.vbox.pack_start(log_scroll)

        delete_overlays_message = _tr("The old version of the system has been edited "
                                      "by the user. Updating the system causes "
                                      "all these changes to be lost. "
                                      "Do you want to proceed?")
        self.delete_overlays_dialog = gtk.MessageDialog(None, gtk.DIALOG_MODAL,
                                                        gtk.MESSAGE_QUESTION,
                                                        gtk.BUTTONS_YES_NO,
                                                        delete_overlays_message)
        self.delete_overlays_dialog.set_title(_tr("Continue updating?"))

    def on_update_available(self):
        self.update_image_item.get_child().set_text(_tr("Update"))
        self.update_image_item.set_sensitive(True)
        self.indicator.set_attention_icon("update-available")
        self.indicator.set_status(appindicator.STATUS_ATTENTION)

    def on_update_completed(self):
        self.update_image_item.get_child().set_text(_tr("(Reboot required to finish the update)"))
        self.update_image_item.set_sensitive(False)
        self.indicator.set_attention_icon("update-installed")
        self.indicator.set_status(appindicator.STATUS_ATTENTION)

    def on_update_started(self):
        self.update_image_item.get_child().set_text(_tr("(Updating)"))
        self.update_image_item.set_sensitive(False)
        self.indicator.set_attention_icon("update-downloading")
        self.indicator.set_status(appindicator.STATUS_ATTENTION)

    def view_log(self, widget):
        self.log_dialog.run()
        self.log_dialog.hide()

    def on_update_failed(self, errmsg):
        self.update_image_item.get_child().set_text(_tr("Update"))
        self.update_image_item.set_sensitive(True)
        self.indicator.set_attention_icon("update-error")
        self.indicator.set_status(appindicator.STATUS_ATTENTION)
        self.log_buffer.insert(self.log_buffer.get_end_iter(),
                               "%s: %s\n" % (datetime.datetime.now(),
                                             _tr("Update failed")))
        self.log_buffer.insert_with_tags(self.log_buffer.get_end_iter(),
                                         errmsg, self.log_error_tag)
        self.log_view.scroll_mark_onscreen(self.log_buffer.get_insert())

    def handle_update_image_reply(self, output):
        print(output)

    def handle_update_image_error(self, error):
        print(error, file=sys.stderr)

    def update_image(self, widget):
        delete_overlays = False
        if self.update_iface.HasOldOverlays():
            delete_overlays = self.delete_overlays_dialog.run() == gtk.RESPONSE_YES
            self.delete_overlays_dialog.hide()
            if not delete_overlays:
                # The user has just answered no, so we are not going
                # to proceed. Returning here is not necessary,
                # UpdateImages() fails if called with
                # delete_overlays=False and there exists some
                # overlays. By returning we avoid generating an
                # user-visible error which would just confuse the
                # user.
                return
        self.update_iface.UpdateImages(False, delete_overlays,
                                       reply_handler=self.handle_update_image_reply,
                                       error_handler=self.handle_update_image_error)

if __name__ == "__main__":
    applet = UpdateIndicatorApplet()
    gtk.main()
