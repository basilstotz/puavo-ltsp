#!/usr/bin/ruby1.9.1

# Services activated by DBus service activation mechanism do not have
# all necessary components in PATH
ENV["PATH"] = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

require 'dbus'
require 'open3'

class Updater < DBus::Object
  @@configuration_update_thread = nil
  @@image_update_thread         = nil

  dbus_interface "org.puavo.client.update" do

    dbus_signal :UpdateAvailable
    dbus_signal :UpdateFailed,            'in outmsg:s, in errmsg:s'
    dbus_signal :UpdateCompleted,         'in outmsg:s, in errmsg:s'
    dbus_signal :UpdateProgressIndicator, 'in phase:s, in progress:i'
    dbus_signal :UpdateStarted

    dbus_method :HasOldOverlays, "out b" do
      output, errput, status \
        = Open3.capture3('/usr/lib/puavo-ltsp-install/ls-old-imageoverlays',
                         '/images',
                         '/imageoverlays')
      if not status.success? then
        raise "failed to list old overlays: #{errput}"
      end
      return !output.empty?
    end

    dbus_method :UpdateImages, "in use_rate_limit:b, in delete_overlays:b, out s" do |use_rate_limit, delete_overlays|
      return "Image update is in progress.\n" if @@image_update_thread

      @@image_update_thread = Thread.new do
        begin
	  if not system("/usr/lib/puavo-ltsp-install/is-update-available") then
	    return ""
	  end

	  self.UpdateStarted

	  output, errput, status \
	    = Open3.capture3('/usr/lib/puavo-ltsp-install/update-images',
			     use_rate_limit  ? 'true' : 'false',
			     delete_overlays ? 'true' : 'false')

	  if not status.success? then
	    self.UpdateFailed(output, errput)
	    raise "failed to update device images: #{errput}"
	  end
	  self.UpdateCompleted(output, errput)
        ensure
	  @@image_update_thread = nil
	end
      end

      return "Image update started.\n"
    end

    dbus_method :UpdateConfiguration, "out s" do
      return "Configuration update is in progress.\n" \
        if @@configuration_update_thread

      @@configuration_update_thread = Thread.new do
        begin
	  command = '/usr/lib/puavo-ltsp-install/update-configuration'

	  output, status = Open3.capture2e(command)
	  if not status.success? then
	    raise "failed to update device configuration: #{ output }"
	  end
	  if system('/usr/lib/puavo-ltsp-install/is-update-available') then
	    self.UpdateAvailable
	  end
        ensure
          @@configuration_update_thread = nil
        end
      end

      return "Configuration update started.\n"
    end

    dbus_method :UpdateProgress,
                "in phase:s, in progress:i" do |phase, progress|
      self.UpdateProgressIndicator(phase, progress)
    end
  end

end

bus = DBus::SystemBus.instance

# Request a well-known name for the service. It can be denied if someone
# has reserved the name (very unlikely, only if someone is playing
# tricks with us) or we do not have permissions to own the name (missing
# conf file in /etc/dbus-1/system.d).
service = bus.request_service("org.puavo.client.Daemon")

# Export all dbus-accessible objects. Currently we have only one, but
# there isn't any reason why we wouldn't them more in future.
updater = Updater.new("/updater")
service.export(updater)

# Run Forrest, run!
loop = DBus::Main.new
loop << bus
loop.run
